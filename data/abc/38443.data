{'TMP': 'C:\\Users\\\xc1\xd6\xce\xa1\\AppData\\Local\\Temp', 'COMPUTERNAME': 'LAPTOP-EG2N663F', 'VS140COMNTOOLS': 'D:\\vs\\Common7\\Tools\\', 'VSSDK140INSTALL': 'D:\\vs\\VSSDK\\', 'USERDOMAIN': 'LAPTOP-EG2N663F', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 94 Stepping 3, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '5e03', 'SYSTEMROOT': 'C:\\Windows', 'PATH': 'C:\\Program Files (x86)\\Java\\jdk1.8.0_111\\bin;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Python27;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\Modules\\TShell\\TShell\\;D:\\runtime\\win64;D:\\bin;D:\\polyspace\\bin;C:\\Python27\\Scripts;C:\\Users\\\xc1\xd6\xce\xa1\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files (x86)\\IDM Computer Solutions\\UltraEdit\\;C:\\Program Files (x86)\\Nmap', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'TEMP': 'C:\\Users\\\xc1\xd6\xce\xa1\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\\xc1\xd6\xce\xa1\\AppData\\Local', 'HOMEPATH': '\\Users\\\xc1\xd6\xce\xa1', 'USERDOMAIN_ROAMINGPROFILE': 'LAPTOP-EG2N663F', 'JAVA_HOME': 'C:\\Program Files (x86)\\Java\\jdk1.8.0_111', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': '\xc1\xd6\xce\xa1', 'LOGONSERVER': '\\\\LAPTOP-EG2N663F', 'PROMPT': '$P$G', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'BASEDIR': 'C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.14393.0', 'ONEDRIVE': 'C:\\Users\\\xc1\xd6\xce\xa1\\OneDrive', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'CONFIGSETROOT': 'C:\\Windows\\ConfigSetRoot', 'WINDIR': 'C:\\Windows', 'APPDATA': 'C:\\Users\\\xc1\xd6\xce\xa1\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '4', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\\xc1\xd6\xce\xa1'}